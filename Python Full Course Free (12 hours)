if statement = code that executes if it's condition is true
age = int(input("How old are you?: ))
if age >= 18:
    print("You are an adult!")
elif age < 0:
    print("You haven't been born yet!")
   ##Can include as many elif statements as needed, if must be first and else last
else:
    print("You are a child!")

##Logical operators (and,or,not) = used to check if 2 statements meet desired conditions
temp = int(input("What is the temperature outside?")
if temp >= 0 and <= 30:
    print("The temperature is good today")
    print("Go outside!")
    ##If using the and operator, both statements must be true
elif: temp < 0 or temp >30:
    print("The temperature is bad today")
       ## Use or if one of the two statements are true

if not temp >= 0 and <= 30:
    print("The temperature is good today")
    print("Go outside!")
elif not: temp < 0 or temp >30:
    print("The temperature is bad today")
    ## when using not after an operator changes the outcome to the opposite of the outcome w/o not operator


 ## while loop = a statement that will execute as long as the conditions remain true
 while 1==1:
    print("Help!")
    ##This is an infinity loop because there is no way to leave the while loop
name = ""
while len(name) ==0:
    name = input("What is your name?")
print("Hello "+name)
##As long as the length of the name is 0, the while loop will continue until the a name is input

##For loop = a statement that will execute a limited number of times
    ##while loop = infinite execution of code
    ##for loop = limited execution of code
for i in range(10):
    print(i)
##for every index in the range of 10, i is printed in the range of 10 time900l

for i in range(50,100+1,2):
    print(i)
##nested loop = the inner loop will finish it's code before the outer loop executes
rows = input("How many rows?")
columns = input("How many columns?")
symbol = input("Enter your symbol")
for i in range(rows):
    for j in range(columns):
        print(symbol, end="") ###the end statement prevents cursor from moving down to the next line
    print()

#Loop control statements = change a loops execution from its normal sequence
##break = used to terminate last loop entirely
##continue = skips to the next iteration of the loop
##pass = does nothing, acts as a placeholder

## LIST = USED TO STORE MULTIPLE ITEMS IN A SINGLE VARIBALE
food = ["pizza", "bun","dog","pasta"]
## the bracket changes from a variable to a list
print(food[1])
## to extract element of list, use index brackets[]
food[0] = "sushi"
##changes element at index 0 to sushi
food.append("ice cream")
##adds a element to the end of the list
food.remove("hotdog")
##removes the element, hot dog
food.pop()
##removes the last element in the list
food.insert(0,"cake")
##at index, 0, adds the element "cake" to the list
food.sort()
##will create a list in alphabetical order
food.clear()
##clears all elements from a list

##2-D lists in python = a list inside of a list (database)
drinks = ["coffee", "soda","tea"]
dinner = ["pizza","hotdog","burger"]
dessert = ["cake","brownie","ice cream"]
food = [drinks,dinner,dessert]
print(food[0][0])
##prints the first element inside of the first list

##tuple = a list that is ordered and unchangeable
            ##used to group related data
student = ("bro",21,"male")
print(student.count("bro"))
    ##counts how many times bro shows up in tuple
for x in student:
    print(x)
    ##to print all elements in tuple
if "bro" in student:
    print("Bro is in student")

